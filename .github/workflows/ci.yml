name: Faleproxy CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm run test:ci
      
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-node-${{ matrix.node-version }}
        path: coverage/
        
  deploy:
    needs: test
    # Only deploy to production when on main/master branch AND all tests pass
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && success()
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        
    - name: Check for Vercel Token
      id: check_token
      run: |
        if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
          echo "::error::VERCEL_TOKEN secret is not configured. Please add it to your repository secrets."
          echo "has_token=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "has_token=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Install Vercel CLI
      if: steps.check_token.outputs.has_token == 'true'
      run: npm install --global vercel@latest
      
    - name: Pull Vercel Environment Information
      if: steps.check_token.outputs.has_token == 'true'
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Build Project Artifacts
      if: steps.check_token.outputs.has_token == 'true'
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      
    - name: Deploy Project Artifacts to Vercel
      if: steps.check_token.outputs.has_token == 'true'
      run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
